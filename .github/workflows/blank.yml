name: Scale EKS Nodes and HPA

on:
  workflow_dispatch:
    inputs:
      namespace:
        description: 'Kubernetes namespace where the HPA is located'
        required: true
        default: 'default'
        type: string
      node_min_size:
        description: 'Minimum size for scaling nodes'
        required: true
        default: '1' 
        type: string
      node_max_size:
        description: 'Maximum size for scaling nodes'
        required: true
        default: '10' 
        type: string
      hpa_min_size:
        description: 'Minimum size for scaling HPA'
        required: true
        default: '2'
        type: string
      hpa_max_size:
        description: 'Maximum size for scaling HPA'
        required: true
        default: '10'
        type: string

  # schedule:
  #   - cron: '*/10 * * * *'
  #   - cron: '*/5 * * * *'

jobs:
  setup:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      node_min_size: ${{ github.event.inputs.node_min_size }}
      node_max_size: ${{ github.event.inputs.node_max_size }}
      hpa_min_size: ${{ github.event.inputs.hpa_min_size }}
      hpa_max_size: ${{ github.event.inputs.hpa_max_size }}
      setup_completed: ${{ steps.setup.outputs.completed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Perform Setup Operation
        id: setup
        run: |
          echo "Setup completed."
          echo "::set-output name=completed::true"

  scale-up:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'workflow_dispatch' && needs.setup.outputs.setup_completed == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure kubectl for EKS
        run: |
          set -e
          aws eks update-kubeconfig --name clouddrove-eks-test-dev-cluster --region ${{ secrets.AWS_REGION }}
          sleep 5
          kubectl config current-context

      - name: Update Node Group Scaling Configuration
        run: |
          CLUSTER_NAME="clouddrove-eks-test-dev-cluster"
          NODE_GROUP_NAME="dev-clouddrove-eks-test-dev-cluster-critical-nodes"
          NODE_MIN_SIZE=${{ needs.setup.outputs.node_min_size }}
          NODE_MAX_SIZE=${{ needs.setup.outputs.node_max_size }}

          CURRENT_MIN_SIZE=$(aws eks describe-nodegroup --cluster-name "$CLUSTER_NAME" --nodegroup-name "$NODE_GROUP_NAME" --query "nodegroup.scalingConfig.minSize" --output text)

          NEW_MIN_SIZE="4"  

          if [ "$NEW_MIN_SIZE" -gt "$NODE_MAX_SIZE" ]; then
            NEW_MIN_SIZE="$NODE_MAX_SIZE"
          fi

          aws eks update-nodegroup-config --cluster-name "$CLUSTER_NAME" --nodegroup-name "$NODE_GROUP_NAME" --scaling-config minSize="$NODE_MIN_SIZE",maxSize="$NODE_MAX_SIZE",desiredSize="$NEW_MIN_SIZE" || { echo "Failed to update node group"; exit 1; }

          echo "Scaled Node Group $NODE_GROUP_NAME: Min Size set to $NODE_MIN_SIZE."

          for i in {1..12}; do
            sleep 10
          done

          NAMESPACE="${{ github.event.inputs.namespace }}"
          HPA_NAME="hpa"  # Hardcoded HPA name
          HPA_MIN_SIZE=${{ needs.setup.outputs.hpa_min_size }}
          HPA_MAX_SIZE=${{ needs.setup.outputs.hpa_max_size }}

          kubectl patch hpa "$HPA_NAME" -n "$NAMESPACE" -p "{\"spec\": {\"minReplicas\": $HPA_MIN_SIZE, \"maxReplicas\": $HPA_MAX_SIZE}}" || { echo "Failed to patch HPA"; exit 1; }
          echo "Scaled HPA $HPA_NAME to minReplicas $HPA_MIN_SIZE and maxReplicas $HPA_MAX_SIZE."

  cron-scale:
    runs-on: ubuntu-latest
    # if: github.event_name == 'schedule'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure kubectl for EKS
        run: |
          set -e
          aws eks update-kubeconfig --name clouddrove-eks-test-dev-cluster --region ${{ secrets.AWS_REGION }}
          kubectl config current-context

      - name: Scale up Node Group Saturday
        # if: github.event.schedule == '*/5 * * * *'
        run: |
          CLUSTER_NAME="clouddrove-eks-test-dev-cluster"
          NODE_GROUP_NAME="dev-clouddrove-eks-test-dev-cluster-critical-nodes"

          NODE_MIN_SIZE=11
          NODE_MAX_SIZE=20

          CURRENT_MIN_SIZE=$(aws eks describe-nodegroup --cluster-name "$CLUSTER_NAME" --nodegroup-name "$NODE_GROUP_NAME" --query "nodegroup.scalingConfig.minSize" --output text)

          NEW_MIN_SIZE=$((CURRENT_MIN_SIZE + 1))

          if [ "$NEW_MIN_SIZE" -gt "$NODE_MAX_SIZE" ]; then
            NEW_MIN_SIZE="$NODE_MAX_SIZE"
          fi

          aws eks update-nodegroup-config --cluster-name "$CLUSTER_NAME" --nodegroup-name "$NODE_GROUP_NAME" --scaling-config minSize="$NEW_MIN_SIZE",maxSize="$NODE_MAX_SIZE",desiredSize="$NEW_MIN_SIZE" || { echo "Failed to update node group"; exit 1; }

          echo "Scaled Up Node Group $NODE_GROUP_NAME: Min Size set to $NEW_MIN_SIZE."

      - name: Scale up HPA Saturday
        # if: github.event.schedule == '*/5 * * * *'
        run: |
          sleep 10
          NAMESPACE="${{ github.event.inputs.namespace }}"
          HPA_NAME="hpa"  

          HPA_MIN_SIZE=10
          HPA_MAX_SIZE=20

          kubectl patch hpa "$HPA_NAME" -n "$NAMESPACE" -p "{\"spec\": {\"minReplicas\": $HPA_MIN_SIZE, \"maxReplicas\": $HPA_MAX_SIZE}}" || { echo "Failed to patch HPA"; exit 1; }
          echo "Scaled Up HPA $HPA_NAME to minReplicas $HPA_MIN_SIZE and maxReplicas $HPA_MAX_SIZE."

      - name: Scale Down Monday Node Group
        # if: github.event.schedule == '*/10 * * * *'
        run: |
          CLUSTER_NAME="clouddrove-eks-test-dev-cluster"
          NODE_GROUP_NAME="dev-clouddrove-eks-test-dev-cluster-critical-nodes"

          NODE_MIN_SIZE=1
          NODE_MAX_SIZE=10

          CURRENT_MIN_SIZE=$(aws eks describe-nodegroup --cluster-name "$CLUSTER_NAME" --nodegroup-name "$NODE_GROUP_NAME" --query "nodegroup.scalingConfig.minSize" --output text)

          NEW_MIN_SIZE=$((CURRENT_MIN_SIZE - 1))

          if [ "$NEW_MIN_SIZE" -lt "$NODE_MIN_SIZE" ]; then
            NEW_MIN_SIZE="$NODE_MIN_SIZE"
          elif [ "$NEW_MIN_SIZE" -gt "$NODE_MAX_SIZE" ]; then
            NEW_MIN_SIZE="$NODE_MAX_SIZE"
          fi

          aws eks update-nodegroup-config --cluster-name "$CLUSTER_NAME" --nodegroup-name "$NODE_GROUP_NAME" --scaling-config minSize="$NEW_MIN_SIZE",maxSize="$NODE_MAX_SIZE",desiredSize="$NEW_MIN_SIZE" || { echo "Failed to update node group"; exit 1; }

          echo "Scaled Down Node Group $NODE_GROUP_NAME: Min Size set to $NEW_MIN_SIZE."

          sleep 10

      - name: Scale Down Monday HPA
        # if: github.event.schedule == '*/10 * * * *'
        run: |
          NAMESPACE="${{ github.event.inputs.namespace }}"
          HPA_NAME="hpa"  

          HPA_MIN_SIZE=2
          HPA_MAX_SIZE=10

          kubectl patch hpa "$HPA_NAME" -n "$NAMESPACE" -p "{\"spec\": {\"minReplicas\": $HPA_MIN_SIZE, \"maxReplicas\": $HPA_MAX_SIZE}}" || { echo "Failed to patch HPA"; exit 1; }
          echo "Scaled Down HPA $HPA_NAME to minReplicas $HPA_MIN_SIZE and maxReplicas $HPA_MAX_SIZE."
